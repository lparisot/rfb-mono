---
- name: create an EC2 key
  ec2_key:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ ec2_my_key }}"
    # Region eu-west-3 does not seem to be available for aws module boto.ec2.
    #region: "{{ ec2_region }}"
    ec2_url: "https://ec2.{{ ec2_region }}.amazonaws.com"
  register: ec2_key

- name: save private key
  copy: content="{{ ec2_key.key.private_key }}" dest="env/{{ project_name }}-{{ env }}-private.pem" mode=0666
  when: ec2_key.changed

- name: create a webserver EC2 instance
  ec2:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ ec2_my_key }}"
    group_id: "{{ webserver_security_group.results[0].group_id }}"
    # Region eu-west-3 does not seem to be available for aws module boto.ec2.
    #region: "{{ ec2_region }}"
    ec2_url: "https://ec2.{{ ec2_region }}.amazonaws.com"
    image: "{{ ec2_image }}"
    instance_type: "{{ ec2_instance_type }}"
    assign_public_ip: yes
    wait: yes
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_volume_size }}"
    vpc_subnet_id: "{{ ec2_subnet }}"
    instance_tags:
      name: "{{ item }}"
      type: "{{ group }}"
      env: "{{ env }}"
    count_tag:
      name: "{{ item }}"
    exact_count: 1
  with_items: "{{ groups[group] }}"
  register: ec2

- name: get facts for webserver instances
  ec2_instance_facts:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      "tag:type": webserver
  register: ec2_webserver_instances

- name: store webserver running results
  set_fact:
    ec2_webservers_running: "{{ ec2_webserver_instances.instances | selectattr('state.name', 'equalto', 'running') | list }}"

- debug: msg="ec2 webservers running {{ ec2_webservers_running }}"

- name: save config to inventory file
  template:
    src: config.j2
    dest: ./env/config
    mode: 0666

- name: wait for ssh to come up for webserver group
  wait_for:
    host: "{{ item.public_ip_address }}"
    port: 22
    state: started
  with_items: "{{ ec2_webservers_running }}"
  when: group == "webserver"

# - name: add IP to ec2_hosts group
#   add_host:
#     hostname: "{{ item.public_dns_name }}"
#     groups: ec2_hosts
#     private_ip: "{{ item.private_ip }}"
#   with_items: ec2.results[0].instances

# - name: make sure user is on server and generate ssh key for it
#   user:
#     name: "{{ app_remote_user }}"
#     generate_ssh_key: yes

# - name: add public keys for developpers
#   authorized_key:
#     user: "{{ app_remote_user }}"
#     key: "{{ lookup('file', item) }}"
#   with_fileglob:
#     - env/users/public_keys/*.pub
