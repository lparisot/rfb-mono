---
- name: get my public IP
  ipify_facts:
    validate_certs: no
  register: myip

- debug: msg="My IP address is {{ myip.ansible_facts.ipify_public_ip }}"

- name: create security groups for a webserver
  ec2_group:
    name: "{{ project_name }}_{{ item.name }}_security_group"
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    description: "{{ project_name }} {{ item.description }} security group"
    vpc_id: "{{ item.vpc_id }}"
    region: "{{ item.region }}"
    purge_rules: true
    rules: "{{ webserver_security_rules }}"
  with_items: "{{ ec2_webserver_groups }}"
  register: ec2_security_groups_temp #webserver_security_group
  when: group == "webserver"

- name: store webserver result in ec2_security_groups
  set_fact:
    ec2_security_groups: "{{ ec2_security_groups | combine({group: ec2_security_groups_temp.results[0]}) }}"
  when: group == "webserver"

- name:
  set_fact:
    database_security_open_for_me:
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: "{{ myip.ansible_facts.ipify_public_ip }}/32"
  when: group == "database" and open_3306_for_me == true

- name: update database security rules if we need to open 3306 for us
  set_fact:
    database_security_rules: "{{ database_security_rules + database_security_open_for_me }}"
  when: group == "database" and open_3306_for_me == true

- name: update database security rules to open 3306 to all webservers
  set_fact:
    database_security_rules: "{{ database_security_rules | default([]) }} + [{ 'proto': 'tcp', 'from_port': 3306, 'to_port': 3306, 'cidr_ip': '{{ item.private_ip_address }}/32' }]"
  with_items: "{{ ec2_instances_running['webserver'] }}"
  when: group == "database"

- name: create security groups for a database
  ec2_group:
    name: "{{ project_name }}_{{ item.name }}_security_group"
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    description: "{{ item.description }}"
    vpc_id: "{{ item.vpc_id }}"
    region: "{{ item.region }}"
    purge_rules: true
    rules: "{{ database_security_rules }}"
  with_items: "{{ ec2_database_groups }}"
  register: ec2_security_groups_temp #database_security_group
  when: group == "database"

- name: store database result in ec2_security_groups
  set_fact:
    ec2_security_groups: "{{ ec2_security_groups | combine({group: ec2_security_groups_temp.results[0]}) }}"
  when: group == "database"
